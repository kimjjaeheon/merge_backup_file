#include "merge_backup_file.h"
#include "append_file.h"
#include "sep.h"

#define  TIME_PASS 1001

extern char backup_files_home[128];

int create_TRAN_LOG_file(FILE_LIST* file_list, MERGE_FILE_LIST* merge_file_list, int mode);
int create_TRX_SUMM_file(FILE_LIST* file_list, MERGE_FILE_LIST* merge_file_list, int mode);
int create_TRAN_INFO_LOG_file(FILE_LIST* file_list, MERGE_FILE_LIST* merge_file_list, int mode);
int find_access_time(char* path);
int backup_if_list[3][BACKUP_IF_NUM];

MERGE_FILE tran_log_name[MERGE_FILE_NUM];
MERGE_FILE trx_summ_name[MERGE_FILE_NUM];
MERGE_FILE tran_info_name[MERGE_FILE_NUM];

static char time_str[32];

static char *get_cur_time(char *format)
{
    struct tm ts;
    struct timeval  curr;
    gettimeofday(&curr, NULL);
    localtime_r((time_t*)&curr.tv_sec, &ts);
    strftime(time_str, sizeof(time_str), format, &ts);
    return time_str;
}

int create_TRAN_LOG_file(FILE_LIST* file_list, MERGE_FILE_LIST* merge_file_list, int mode)
{
	//char file_path[FILE_NAME_LEN];	
	FILE *fp[BACKUP_IF_NUM];
	int ret = 1;
	int if_num, i, j, tmp_idx, m_idx = 0;
	int m_file_flag = 0;
	char *tmp;

	memset(tran_log_name, 0x00, MERGE_FILE_NUM);
	for (i = 0; i < BACKUP_IF_NUM; i++)	
	{
		if (mode == DAY)
		{
			if (backup_if_list[LOAD_FILE_LOG][i] == 1) //init 에서 TRAN_LOG 파일 값이 1인 것만 체크
			{
				//sprintf(tran_log_name[i].name, "TRAN_LOG_%s", get_cur_time("%Y%m%d"));
				for (j = 0; j < file_list->total_file_cnt; j++)
				{
					/* tran_log 파일들만 골라낸다 */
					if (file_list->files[j].dir_num != LOAD_FILE_LOG)
					{
						continue;
					}

					/* IF 번호와 현재 i의 값이 같은 것들만 골라낸다 */
					/* 다른 IF 에 이름이 같은 파일이 있을 수 있다   */
					if (file_list->files[j].if_num != i)
					{
						continue;
					}

					/* 첫번째 파일의 YYYYMMDD 를 가져와서 Merge 할 파일을 만든다 */
					/* 그 날짜를 기준으로동일하다면 파일에 merge할 merge_file_idx 의 값을 넣어준다 */
					if ( m_idx == 0 )
					{
						memcpy(tran_log_name[m_idx].name, file_list->files[j].name, TRAN_LOG_DAY_SEP);
						sprintf(merge_file_list->files[m_idx].path, "%s/tran_log/%02d/%s.dat", backup_files_home, i, tran_log_name[m_idx].name);
						file_list->files[j].merge_file_idx = m_idx;
						merge_file_list->files[m_idx++].if_num = i;
						log_printf("TRAN_LOG 파일 생성  : %s", merge_file_list->files[m_idx].path);
						continue;
					}
					else
					{
						for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
						{
							if (!memcmp(file_list->files[j].name, tran_log_name[tmp_idx].name, TRAN_LOG_DAY_SEP)) // 현재 날짜와 파일의 날짜가 같을 때 */
							{
								m_file_flag = 1;
								file_list->files[j].merge_file_idx = tmp_idx;
								continue;
							}
						}

						if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
						{
							memcpy(tran_log_name[m_idx].name, file_list->files[j].name, TRAN_LOG_DAY_SEP);
							sprintf(merge_file_list->files[m_idx].path, "%s/tran_log/%02d/%s.dat", backup_files_home, i, tran_log_name[m_idx].name);
							file_list->files[j].merge_file_idx = m_idx;
							merge_file_list->files[m_idx++].if_num = i;
							continue;
						}
						else
						{
							m_file_flag = 0;
						}
					}
				}
				//memcpy(merge_file_list->files[i].name, tmp,strlen(tmp));
			}
			else
			{
				continue;
			}
		}
		else if (mode == TIME)
		{
			if (backup_if_list[LOAD_FILE_LOG][i] == 1) //init 에서 TRAN_LOG 파일 값이 1인 것만 체크
			{
				for (j = 0; j < file_list->total_file_cnt; j++)
				{
					/* tran_log 파일들만 골라낸다 */
					if (file_list->files[j].dir_num != LOAD_FILE_LOG)
					{
						continue;
					}

					/* IF 번호와 현재 i의 값이 같은 것들만 골라낸다 */
					/* 다른 IF 에 이름이 같은 파일이 있을 수 있다   */
					if (file_list->files[j].if_num != i)
					{
						continue;
					}

					/* 마지막 접근 시간이 30초 미만이면 pass 한다. */
					if (find_access_time(file_list->files[i].path) != TIME_PASS)
					{
						continue;
					}

					/* 첫번째 파일의 YYYYMMDD 를 가져와서 Merge 할 파일을 만든다 */
					/* 그 날짜를 기준으로동일하다면 파일에 merge할 merge_file_idx 의 값을 넣어준다 */
					if ( m_idx == 0 )
					{
						memcpy(tran_log_name[m_idx].name, file_list->files[j].name, TRAN_LOG_TIME_SEP);
						sprintf(merge_file_list->files[m_idx].path, "%s/tran_log/%02d/%s.dat", backup_files_home, i, tran_log_name[m_idx].name);
						file_list->files[j].merge_file_idx = m_idx;
						printf("file_list : %s\n", merge_file_list->files[m_idx].path);
						merge_file_list->files[m_idx++].if_num = i;
						continue;
					}
					else
					{
						for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
						{
							if (!memcmp(file_list->files[j].name, tran_log_name[tmp_idx].name, TRAN_LOG_TIME_SEP)) // 현재 날짜와 파일의 날짜가 같을 때 */
							{
								m_file_flag = 1;
								file_list->files[j].merge_file_idx = tmp_idx;
								continue;
							}
						}

						if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
						{
							memcpy(tran_log_name[m_idx].name, file_list->files[j].name, TRAN_LOG_TIME_SEP);
							sprintf(merge_file_list->files[m_idx].path, "%s/tran_log/%02d/%s.dat", backup_files_home, i, tran_log_name[m_idx].name);
							file_list->files[j].merge_file_idx = m_idx;
							merge_file_list->files[m_idx++].if_num = i;
							continue;
						}
						else
						{
							m_file_flag = 0;
						}
					}
				}
				//memcpy(merge_file_list->files[i].name, tmp,strlen(tmp));
			}
			else
			{
				continue;
			}
		}
		else
		{
			printf("<!> create_TRAN_LOG_file mode setting 확인 요망 \n");
			ret = 0;
			return ret;
		}
	}

	// merge 할 파일 생성
	for (i = 0; i < m_idx; i++)
	{
		if (!access(merge_file_list->files[i].path, F_OK))
		{
			remove(merge_file_list->files[i].path);
		}

		fp[i] = fopen(merge_file_list->files[i].path, "w+");
		if (!fp[i])
		{
			printf("%s file open fail\n", merge_file_list->files[i].path);
			ret = 0;
		}		
		printf("file : %s\n", merge_file_list->files[i].path);

		fclose(fp[i]);
	}

	return ret;
}


int create_TRX_SUMM_file(FILE_LIST* file_list, MERGE_FILE_LIST* merge_file_list, int mode)
{
	//char file_path[FILE_NAME_LEN];	
	FILE *fp[BACKUP_IF_NUM];
	int ret = 1;
	int if_num, i, j, tmp_idx, m_idx = 0;
	int m_file_flag = 0;
	char *tmp;

	memset(trx_summ_name, 0x00, MERGE_FILE_NUM);
	if (mode == DAY)
	{
		for (i = 0; i < file_list->total_file_cnt; i++)
		{
			/* trx_summ 파일들만 골라낸다 */
			if (file_list->files[i].dir_num != LOAD_FILE_TRX_SUMM)
			{
				continue;
			}

			/* 첫번째 파일의 YYYYMMDD 를 가져와서 Merge 할 파일을 만든다 */
			/* 그 날짜를 기준으로동일하다면 파일에 merge할 merge_file_idx 의 값을 넣어준다 */
			if ( m_idx == 0 )
			{
				memcpy(trx_summ_name[m_idx].name, file_list->files[i].name, TRX_SUMM_DAY_SEP);
				sprintf(merge_file_list->files[m_idx].path, "%s/tran_statis/trx_summ/%s.dat", backup_files_home, trx_summ_name[m_idx].name);
				file_list->files[i].merge_file_idx = m_idx;
				printf("file_list : %s\n", merge_file_list->files[m_idx].path);
				merge_file_list->files[m_idx++].if_num = NO_IF_NUM;
				continue;
			}
			else
			{
				for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
				{
					if (!memcmp(file_list->files[i].name, trx_summ_name[tmp_idx].name, TRX_SUMM_DAY_SEP)) // 현재 날짜와 파일의 날짜가 같을 때 */
					{
						m_file_flag = 1;
						file_list->files[i].merge_file_idx = tmp_idx;
						continue;
					}
				}

				if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
				{
					memcpy(trx_summ_name[m_idx].name, file_list->files[i].name, TRX_SUMM_DAY_SEP);
					sprintf(merge_file_list->files[m_idx].path, "%s/tran_statis/trx_summ/%s.dat", backup_files_home, trx_summ_name[m_idx].name);
					file_list->files[i].merge_file_idx = m_idx;
					merge_file_list->files[m_idx++].if_num = NO_IF_NUM;
					continue;
				}
				else
				{
					m_file_flag = 0;
				}
			}
		}
	}
	else if (mode == TIME)
	{
		for (i = 0; i < file_list->total_file_cnt; i++)
		{
			/* trx_summ 파일들만 골라낸다 */
			if (file_list->files[i].dir_num != LOAD_FILE_TRX_SUMM)
			{
				continue;
			}
			
			/* 마지막 접근 시간이 30초 미만이면 pass 한다. */
			if (find_access_time(file_list->files[i].path) != TIME_PASS)
			{
				continue;
			}

			/* 첫번째 파일의 YYYYMMDD 를 가져와서 Merge 할 파일을 만든다 */
			/* 그 날짜를 기준으로동일하다면 파일에 merge할 merge_file_idx 의 값을 넣어준다 */
			if ( m_idx == 0 )
			{
				memcpy(trx_summ_name[m_idx].name, file_list->files[i].name, TRX_SUMM_TIME_SEP);
				sprintf(merge_file_list->files[m_idx].path, "%s/tran_statis/trx_summ/%s.dat", backup_files_home, trx_summ_name[m_idx].name);
				file_list->files[i].merge_file_idx = m_idx;
				printf("file_list : %s\n", merge_file_list->files[m_idx].path);
				merge_file_list->files[m_idx++].if_num = NO_IF_NUM;
				continue;
			}
			else
			{
				for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
				{
					if (!memcmp(file_list->files[i].name, trx_summ_name[tmp_idx].name, TRX_SUMM_TIME_SEP)) // 현재 날짜와 파일의 날짜가 같을 때 */
					{
						m_file_flag = 1;
						file_list->files[i].merge_file_idx = tmp_idx;
						continue;
					}
				}

				if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
				{
					memcpy(trx_summ_name[m_idx].name, file_list->files[i].name, TRX_SUMM_TIME_SEP);
					sprintf(merge_file_list->files[m_idx].path, "%s/tran_statis/trx_summ/%s.dat", backup_files_home, trx_summ_name[m_idx].name);
					file_list->files[i].merge_file_idx = m_idx;
					merge_file_list->files[m_idx++].if_num = NO_IF_NUM;
					continue;
				}
				else
				{
					m_file_flag = 0;
				}
			}
		}
	}
	else
	{
		printf("<!> create_TRX_SUMM_file mode setting 확인 요망 \n");
		ret = 0;
		return ret;
	}

	// merge 할 파일 생성
	for (i = 0; i < m_idx; i++)
	{
		if (!access(merge_file_list->files[i].path, F_OK))
		{
			remove(merge_file_list->files[i].path);
		}

		fp[i] = fopen(merge_file_list->files[i].path, "w+");
		if (!fp[i])
		{
			printf("%s file open fail\n", merge_file_list->files[i].path);
			ret = 0;
		}		
		printf("file : %s\n", merge_file_list->files[i].path);

		fclose(fp[i]);
	}

	return ret;
}


int create_TRAN_INFO_LOG_file(FILE_LIST* file_list, MERGE_FILE_LIST* merge_file_list, int mode)
{
	//char file_path[FILE_NAME_LEN];	
	FILE *fp[BACKUP_IF_NUM], *input_fp, *merge_fp;
	int ret = 1;
	int if_num, i, j, tmp_idx, m_idx = 0; //m_idx = merge(append)할 파일 인덱스
	int m_file_flag = 0, buff_len = 0, same_file_flag = 0;
	char *tmp;
	char buff[READ_BUF_SIZE];    //파일 읽어서 담는 buff
	char output_buff[READ_BUF_SIZE] = {0x00, };    //infolog parsing 후 담아올 buff
	char log_day[11] = {0x00, };

	memset(tran_info_name, 0x00, MERGE_FILE_NUM);
	
	for (i = 0; i < BACKUP_IF_NUM; i++)	
	{
		if (mode == DAY)
		{
			if (backup_if_list[LOAD_FILE_INFOLOG][i] == 1) //init 에서 TRAN_LOG 파일 값이 1인 것만 체크
			{
				//sprintf(tran_log_name[i].name, "TRAN_LOG_%s", get_cur_time("%Y%m%d"));
				for (j = 0; j < file_list->total_file_cnt; j++)
				{
					/* tran_log 파일들만 골라낸다 */
					if (file_list->files[j].dir_num != LOAD_FILE_INFOLOG)
					{
						continue;
					}
		
                    /* 마지막 접근 시간이 30초 미만이면 pass 한다. */
                    if (find_access_time(file_list->files[i].path) != TIME_PASS)
                    {
                        continue;
                    }

					/* IF 번호와 현재 i의 값이 같은 것들만 골라낸다 */
					/* 다른 IF 에 이름이 같은 파일이 있을 수 있다   */
					if (file_list->files[j].if_num != i)
					{
						continue;
					}
					else
					{
						for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
						{
							if (!memcmp(file_list->files[j].name, tran_log_name[tmp_idx].name, TRAN_INFO_DAY_SEP)) // 현재 날짜와 파일의 날짜가 같을 때 */
							{
								m_file_flag = 1;
								file_list->files[j].merge_file_idx = tmp_idx;
								continue;
							}
						}

						if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
						{
							memcpy(tran_log_name[m_idx].name, file_list->files[j].name, TRAN_INFO_DAY_SEP);
							sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/%s.dat", backup_files_home, i, tran_info_name[m_idx].name);
							file_list->files[j].merge_file_idx = m_idx;
							merge_file_list->files[m_idx++].if_num = i;
							continue;
						}
						else
						{
							m_file_flag = 0;
						}
					}
				}
				//memcpy(merge_file_list->files[i].name, tmp,strlen(tmp));
			}
			else
			{
				continue;
			}
		}
		else if (mode == TIME)
		{
			if (backup_if_list[LOAD_FILE_INFOLOG][i] == 1) //init 에서 TRAN_LOG 파일 값이 1인 것만 체크
			{
				for (j = 0; j < file_list->total_file_cnt; j++) /* file_list 에서 file들의 인덱스 = j */ 
				{
					if (file_list->files[j].dir_num != LOAD_FILE_INFOLOG) /* INFOLOG가 맞는지 확인 */
					{
						continue;
					}
					if (file_list->files[j].if_num != i) /* 해당 파일의 IF 번호가 현재 탐색하고있는지 IF 번호와 일치하는지 */
					{
						continue;
					}
					/* 마지막 접근 시간이 30초 미만이면 pass 한다. */
                    if (find_access_time(file_list->files[j].path) != TIME_PASS)
                    {
                        continue;
                    }
					if(merge_file_list->files[m_idx].path) /* 읽으려는 파일리스트에 append 하려는 파일이 있을 때 제외 */
					{
						for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
						{
							/* append 할 파일명과 read 해야할 파일이 같을 때 skip */
							if (!memcmp(file_list->files[j].path, merge_file_list->files[tmp_idx].path,63))
							{
								same_file_flag = 1;
								continue;
							}
						}
						if (same_file_flag == 1)
						{
							same_file_flag = 0;
							continue;
						}
					}
					/* 파일 1줄씩 buff로 읽고 앞부분이 해당되는 LOG 파일에 붙혀 넣는다 */
					input_fp = fopen(file_list->files[j].path, "r"); 

					if (input_fp == NULL)	
					{
						log_printf("<!> file open fail (tran_infolog_file : %s\n", file_list->files[j].path);
						continue;
					}
		
					while (fgets(buff, sizeof(buff), input_fp))
					{
						if (!memcmp(buff, "C^C^" , 4)) /* C^C^ 로 시작하는 라인은 _C_*.dat 파일에 append */
						{
							sep_infolog(buff, output_buff, INFO_C, log_day, mode); /* 시간값을 가져온다 (log_day에담는다) */
							if ( m_idx == 0 ) /* 아직 append 할 파일이 없을 때 만든다. */
							{
								sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_C_%s.dat", backup_files_home, i, log_day);
								memcpy(merge_file_list->files[m_idx].log_day, log_day, 11);
								
                                log_printf("(I) append 할 파일 생성 중 "); 
								log_printf("(I) append 할 파일 명 :  %s ", merge_file_list->files[m_idx].path);
								merge_fp = fopen(merge_file_list->files[m_idx].path, "a+");
								if (merge_fp == NULL)
								{
									log_printf("<!> append 할 파일 open fail : %s ", merge_file_list->files[tmp_idx].path);
									continue;
								}
								else
								{
									fputs(output_buff, merge_fp);
									fclose(merge_fp);
									merge_file_list->files[m_idx].log_type = 'C';
									m_idx++;
                                	log_printf("(I) append 할 파일 생성 완료 "); 
								}
							}
							else
							{
								for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
								{
									
									if (!memcmp(merge_file_list->files[tmp_idx].log_day, log_day, 10) && (merge_file_list->files[tmp_idx].log_type == 'C')) /* 현재 날짜와 파일의 날짜가 같을 때 */
									{
										m_file_flag = 1; /* merge 할 파일이 있음 ( 0:없음, 1:있음) */
										merge_fp = fopen(merge_file_list->files[tmp_idx].path, "a+");		
										if (merge_fp == NULL)
										{
											log_printf("<!> append 할 파일 open fail : %s \n", merge_file_list->files[tmp_idx].path);
											continue;
										}
										else
										{
											fputs(output_buff, merge_fp);
											fclose(merge_fp);
										}
									}
								}

								if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
								{
									sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_C_%s.dat", backup_files_home, i, log_day);
									log_printf("(I) append 할 파일 생성 중 ");
                                	log_printf("(I) append 할 파일 명 :  %s ", merge_file_list->files[m_idx].path);
									merge_fp = fopen(merge_file_list->files[m_idx].path, "a+");
									if (merge_fp == NULL)
									{
											log_printf("<!> merge_file open fail : ", merge_file_list->files[m_idx].path);
											continue;
									}
									else
									{
										fputs(output_buff, merge_fp);
										fclose(merge_fp);
									}
									file_list->files[j].merge_file_idx = m_idx; /* append 할 파일 번호 넣기 */
									merge_file_list->files[m_idx].log_type = 'C'; /* IF 번호 넣기 */
									merge_file_list->files[m_idx].if_num = i; /* IF 번호 넣기 */
									memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
									m_idx++;
									log_printf("(I) append 할 파일 생성 완료 ");
								}
								else
								{
									m_file_flag = 0; 
								}
							}
						}
						else if (!memcmp(buff, "I^I^" , 4)) /* I^I^ 로 시작하는 라인은 _C_*.dat 파일에 append */
						{
							sep_infolog(buff, output_buff, INFO_I, log_day, mode); /* 시간값을 가져온다 (log_day에담는다) */
							if ( m_idx == 0 ) /* 아직 append 할 파일이 없을 때 만든다. */
							{
								sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_I_%s.dat", backup_files_home, i, log_day);
								memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
                                log_printf("(I) append 할 파일 생성 중 "); 
								log_printf("(I) append 할 파일 명 :  %s ", merge_file_list->files[m_idx].path);
								merge_fp = fopen(merge_file_list->files[m_idx].path, "a+");
								if (merge_fp == NULL)
								{
                                    log_printf("<!> merge_file open fail : %s ", merge_file_list->files[m_idx].path);
									continue;
								}
								else
								{
									fputs(output_buff, merge_fp);
									fclose(merge_fp);
									merge_file_list->files[m_idx].log_type = 'I';
									m_idx++;
                                	log_printf("(I) append 할 파일 생성 완료 "); 
								}
							}
							else
							{
								for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
								{
									if (!memcmp(merge_file_list->files[tmp_idx].log_day, log_day, 10) && (merge_file_list->files[tmp_idx].log_type == 'I')) /* 현재 날짜와 파일의 날짜가 같을 때 */
									{
										m_file_flag = 1; /* merge 할 파일이 있음 ( 0:없음, 1:있음) */
										
										merge_fp = fopen(merge_file_list->files[tmp_idx].path, "a+");		
										if (merge_fp == NULL)
										{
                                            log_printf("<!> merge_file open fail : %s \n", merge_file_list->files[m_idx].path);
											continue;
										}
										else
										{
											fputs(output_buff, merge_fp);
											fclose(merge_fp);
										}
									}
								}

								if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
								{
									sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_I_%s.dat", backup_files_home, i, log_day);
                                    merge_fp = fopen(merge_file_list->files[m_idx].path, "a+");
                                    if (merge_fp == NULL)
                                    {
                                            log_printf("<!> merge_file open fail : %s \n", merge_file_list->files[m_idx].path);
                                            continue;
                                    }
                                    else
                                    {
                                        fputs(output_buff, merge_fp);
                                        fclose(merge_fp);
                                    }
                                    file_list->files[j].merge_file_idx = m_idx; /* append 할 파일 번호 넣기 */
                                    merge_file_list->files[m_idx].log_type = 'I'; /* IF 번호 넣기 */
                                    merge_file_list->files[m_idx].if_num = i; /* IF 번호 넣기 */
									memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
                                    m_idx++;
								}
								else
								{
									m_file_flag = 0; 
								}
							}
						}
						else if (!memcmp(buff, "B^B^" , 4)) /* B^B^ 로 시작하는 라인은 _B_*.dat 파일에 append */
						{
							sep_infolog(buff, output_buff, INFO_B, log_day, mode); /* 시간값을 가져온다 (log_day에담는다) */
                            if ( m_idx == 0 ) /* 아직 append 할 파일이 없을 때 만든다. */
                            {
                                sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_B_%s.dat", backup_files_home, i, log_day);
                                memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
                                log_printf("(I) append 할 파일 생성 중 ");
                                log_printf("(I) append 할 파일 명 :  %s ", merge_file_list->files[m_idx].path);
                                merge_fp = fopen(merge_file_list->files[m_idx].path, "a+b");
                                if (merge_fp == NULL)
                                {
                                    log_printf("<!> merge_file open fail : %s ", merge_file_list->files[m_idx].path);
                                    continue;
                                }
                                else
                                {
                                    fputs(output_buff, merge_fp);
                                    fclose(merge_fp);
                                    merge_file_list->files[m_idx].log_type = 'B';
                                    m_idx++;
                                    log_printf("(I) append 할 파일 생성 완료 ");
                                }
                            }
                            else
                            {
                                for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
                                {
                                    if (!memcmp(merge_file_list->files[tmp_idx].log_day, log_day, 10) && (merge_file_list->files[tmp_idx].log_type == 'B')) /* 현재 날짜와 파일의 날짜가 같을 때 */
                                    {
                                        m_file_flag = 1; /* merge 할 파일이 있음 ( 0:없음, 1:있음) */
                                        merge_fp = fopen(merge_file_list->files[tmp_idx].path, "a+b");
                                        if (merge_fp == NULL)
                                        {
                                            log_printf("<!> merge_file open fail : %s \n", merge_file_list->files[m_idx].path);
                                            continue;
                                        }
                                        else
                                        {
                                            fputs(output_buff, merge_fp);
                                            fclose(merge_fp);
                                        }
                                    }
                                }

                                if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
                                {
                                    sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_B_%s.dat", backup_files_home, i, log_day);
                                    merge_fp = fopen(merge_file_list->files[m_idx].path, "a+b");
                                    if (merge_fp == NULL)
                                    {
                                            log_printf("<!> merge_file open fail : %s \n", merge_file_list->files[m_idx].path);
                                            continue;
                                    }
                                    else
                                    {
                                        fputs(output_buff, merge_fp);
                                        fclose(merge_fp);
                                    }
                                    file_list->files[j].merge_file_idx = m_idx; /* append 할 파일 번호 넣기 */
                                    merge_file_list->files[m_idx].log_type = 'B'; /* IF 번호 넣기 */
                                    merge_file_list->files[m_idx].if_num = i; /* IF 번호 넣기 */
                                    memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
                                    m_idx++;
                                }
                                else
                                {
                                    m_file_flag = 0;
                                }
                            }
						}
						else if (!memcmp(buff, "J^E^" , 4)) /* J^E^ 로 시작하는 라인은 _Q_*.dat 파일에 append */
						{
							sep_infolog(buff, output_buff, INFO_J, log_day, mode); /* 시간값을 가져온다 (log_day에담는다) */
                            if ( m_idx == 0 ) /* 아직 append 할 파일이 없을 때 만든다. */
                            {
                                sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_J_%s.dat", backup_files_home, i, log_day);
                                memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
                                log_printf("(I) append 할 파일 생성 중 ");
                                log_printf("(I) append 할 파일 명 :  %s ", merge_file_list->files[m_idx].path);
                                merge_fp = fopen(merge_file_list->files[m_idx].path, "a+b");
                                if (merge_fp == NULL)
                                {
                                    log_printf("<!> merge_file open fail : %s ", merge_file_list->files[m_idx].path);
                                    continue;
                                }
                                else
                                {
									/* J^E^ 는 그냥 append 하기 때문에 outbuff를 넣지않고 buff 그대로 넣는다.*/
                                    fputs(buff, merge_fp);
                                    fclose(merge_fp);
                                    merge_file_list->files[m_idx].log_type = 'J';
                                    m_idx++;
                                    log_printf("(I) append 할 파일 생성 완료 ");
                                }
                            }
                            else
                            {           
                                for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
                                {
                                    if (!memcmp(merge_file_list->files[tmp_idx].log_day, log_day, 10) && (merge_file_list->files[tmp_idx].log_type == 'J')) /* 현재 날짜와 파일의 날짜가 같을 때 */
                                    {
                                        m_file_flag = 1; /* merge 할 파일이 있음 ( 0:없음, 1:있음) */   
                                        merge_fp = fopen(merge_file_list->files[tmp_idx].path, "a+b");
                                        if (merge_fp == NULL)
                                        {
                                            log_printf("<!> merge_file open fail : %s \n", merge_file_list->files[m_idx].path);
                                            continue;
                                        }
                                        else
                                        {
                                            fputs(buff, merge_fp);
                                            fclose(merge_fp);
                                        }
                                    }
                                }   
                                    
                                if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
                                {   
                                    sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_J_%s.dat", backup_files_home, i, log_day);                             
                                    merge_fp = fopen(merge_file_list->files[m_idx].path, "a+b");
                                    if (merge_fp == NULL)
                                    {
                                            log_printf("<!> merge_file open fail : %s \n", merge_file_list->files[m_idx].path);
                                            continue;
                                    }
                                    else
                                    {
                                        fputs(buff, merge_fp);
                                        fclose(merge_fp);
                                    }
                                    file_list->files[j].merge_file_idx = m_idx; /* append 할 파일 번호 넣기 */
                                    merge_file_list->files[m_idx].log_type = 'J'; /* IF 번호 넣기 */
                                    merge_file_list->files[m_idx].if_num = i; /* IF 번호 넣기 */
                                    memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
                                    m_idx++;
                                }
                                else
                                {
                                    m_file_flag = 0;
                                }
                            }
						}
						else if (!memcmp(buff, "Q^Q^" , 4)) /* Q^Q^ 로 시작하는 라인은 _Q_*.dat 파일에 append */
						{
							sep_infolog(buff, output_buff, INFO_Q, log_day, mode); /* 시간값을 가져온다 (log_day에담는다) */
                            if ( m_idx == 0 ) /* 아직 append 할 파일이 없을 때 만든다. */
                            {                                       
								sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_Q_%s.dat", backup_files_home, i, log_day);
                                memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
								log_printf("(I) append 할 파일 생성 중 ");
                                log_printf("(I) append 할 파일 명 :  %s ", merge_file_list->files[m_idx].path);
                                merge_fp = fopen(merge_file_list->files[m_idx].path, "a+b");
                                if (merge_fp == NULL)
                                {           
                                    log_printf("<!> merge_file open fail : %s ", merge_file_list->files[m_idx].path);
                                    continue;
                                }       
                                else    
                                {           
                                    /* Q^Q^ 는 그냥 append 하기 때문에 outbuff를 넣지않고 buff 그대로 넣는다.*/
                                    fputs(buff, merge_fp);
                                    fclose(merge_fp);
                                    merge_file_list->files[m_idx].log_type = 'Q';
                                    m_idx++;
                                    log_printf("(I) append 할 파일 생성 완료 ");
                                }   
                            }       
                            else
                            {        
                                for (tmp_idx = 0; tmp_idx < m_idx; tmp_idx++)
                                {
                                    if (!memcmp(merge_file_list->files[tmp_idx].log_day, log_day, 10) && (merge_file_list->files[tmp_idx].log_type == 'Q')) /* 현재 날짜와 파일의 날짜가 같을 때 */
                                    {      
										m_file_flag = 1; /* merge 할 파일이 있음 ( 0:없음, 1:있음) */
                                        merge_fp = fopen(merge_file_list->files[tmp_idx].path, "a+b");
                                        if (merge_fp == NULL)
                                        {
                                            log_printf("<!> merge_file open fail : %s \n", merge_file_list->files[m_idx].path);
                                            continue;
                                        }
                                        else
                                        {
                                            fputs(buff, merge_fp);
                                            fclose(merge_fp);
                                        }
                                    }
                                }   
                                    
                                if (m_file_flag == 0) // merge할 파일과 날짜가 다를때 다른 날짜로 merge할 파일을 생성시켜준다.
                                {   
                                    sprintf(merge_file_list->files[m_idx].path, "%s/tran_infolog/%02d/TRAN_INFOLOG_Q_%s.dat", backup_files_home, i, log_day);                             
                                    merge_fp = fopen(merge_file_list->files[m_idx].path, "a+b");
                                    if (merge_fp == NULL)
                                    {
                                            log_printf("<!> merge_file open fail : %s \n", merge_file_list->files[m_idx].path);
                                            continue;
                                    }
                                    else
                                    {
                                        fputs(buff, merge_fp);
                                        fclose(merge_fp);
                                    }
                                    file_list->files[j].merge_file_idx = m_idx; /* append 할 파일 번호 넣기 */
                                    merge_file_list->files[m_idx].log_type = 'Q'; /* IF 번호 넣기 */
                                    merge_file_list->files[m_idx].if_num = i; /* IF 번호 넣기 */
                                    memcpy(merge_file_list->files[m_idx].log_day, log_day, 10);
                                    m_idx++;
                                }
                                else
                                {
                                    m_file_flag = 0;
                                }
                            }
						}
						else
						{
							continue;
						}
					}	
					fclose(input_fp);
				}
			}
		}
		else
		{
			log_printf("<!> create_TRAN_INFOLOG_file mode setting 확인 요망 \n");
			ret = 0;
			return ret;
		}
	}

	return ret;
}

int find_access_time(char* path)
{
    struct stat file;

    /* 현재 시간 */
    struct timeval rawtime;
    time_t rawtime_tm ;
    gettimeofday(&rawtime, NULL);
    rawtime_tm = rawtime.tv_sec ;

    if (lstat(path, &file) == -1)
    {
        log_printf("<!> find_access_time fail ");
        log_printf("    file name : %s ", path);
    }

    //printf("file_name : %s\n", path);
    //printf("time is : %ld\n", rawtime_tm);
    //printf("Last change time is : %ld\n", file.st_ctime);
    //printf("time - last_change : %ld\n", rawtime_tm - file.st_ctime);

    if ((rawtime_tm - file.st_ctime) > 30)
    {
        return TIME_PASS;
    }
    else
    {
        log_printf("<!> find_access_time fail(file name : %s)", path);
        log_printf("    수정된 지 30초가 지나지 않았음 ");
        return 0;
    }
}

